/*
Function for merge serval images to a panorama

For more information refer to 
	Matthew Brown and David G. Lowe-
		Automatic Panoramic Image Stitching using Invariant Features
		<EM>International Journal of Computer Vision</EM> (2007),
	
Copyright (C) 2010  Samson William Mulder <walkingmu@gmail.com>

version 20100228
*/
#pragma once
//standard c++ head files
#include <list>
#include <string>

//OpenCV head files
#include <cv.h>
#include <cxcore.h>
#include <highgui.h>

//head files provided by Rob Hess
#include "kdtree.h"
#include "imgfeatures.h"

using namespace std;

//--------------------Global parameters----------------------

//the potential image matches set, see Section 3 in Brown's paper
#define CANDIDATE_IMAGE_NUM 6

/*
minimum number of correspondences necessary to instantiate the
transform computed by  xform_fn
the value is used in RANSAC calculate( function ransac_xform in xform.h). 
*/
#define MINI_NUM_OF_CORRESPONDCES 4

/*
desired probability that the final transformation
returned by RANSAC is corrupted by outliers 
the value is used in RANSAC calculate( function ransac_xform in xform.h). 
*/
#define DESIRED_PROBABILTY 0.5

/*
correspondences within this distance of each other are
considered as inliers for a given transform.
the value is used in RANSAC calculate( function ransac_xform in xform.h). 
*/
#define CORRESPOINDENCES_OF_INLIER_DISTANCE 0.6

/* the maximum number of keypoint NN candidates to check during BBF search */
#define KDTREE_BBF_MAX_NN_CHKS 200
 
/* threshold on squared ratio of distances between NN and 2nd NN */
#define NN_SQ_DIST_RATIO_THR 0.49

#define MATCH_NOT_ACCEPT	0
#define MATCH_ACCEPT			1

//ERROR CODE
#define SUCCESS_NO_ERROR 0



//-------------------structures-----------------------------
typedef struct featurereciver
{
	struct feature* feat; //SIFT features generated by SIFT algorithm
	int num;//how many features are generated in each image
	struct kd_node* kd_root; //The root node of the kdtree built by the features
}FeatRev;

typedef struct _panoImg PanoImage;

typedef struct imageCandiate
{
	PanoImage* panoImg; //the related image file
	//The feature link which is matched between the orginal image and current image
	//this param will be used in RANSAC calculation
	struct feature* feat; 
	int num; //number of match respect to the source image.
	int accept;//if pass the Probabilistic Model Verify, accept is non-zero value
}ImageCandidate;

struct _panoImg
{
	//Input parameters
	IplImage* lstImg; //a image waited to be combined
	//Output parameters
	featurereciver featRev;// The feature which would be generated during the combination
	//the candiate image file which is similar to the source image file
	imageCandiate candidates[CANDIDATE_IMAGE_NUM];
};

typedef struct mergedata
{
	//input parameter(s)
	list<PanoImage> lstpanoImgs; //a list of images waited to be combined
	//output parameter(s)
	IplImage* IplPanorama; //The output panorama
}MergeData;

typedef struct mergeoption
{

}MergeOpt;
